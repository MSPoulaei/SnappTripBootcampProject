// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SnappTrip.DataAccessLayer;

#nullable disable

namespace SnappTrip.DataAccessLayer.Migrations
{
    [DbContext(typeof(SnappTripDbContext))]
    partial class SnappTripDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SnappTrip.DataAccessLayer.Models.Action", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<decimal>("FixedDisplacementAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MaximumDisplacementAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PercentageDisplacementAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("SnappTrip.DataAccessLayer.Models.Condition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("ConditionType")
                        .HasColumnType("int");

                    b.Property<int>("ConditionValue")
                        .HasColumnType("int");

                    b.Property<long>("RuleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RuleId");

                    b.ToTable("Conditions");
                });

            modelBuilder.Entity("SnappTrip.DataAccessLayer.Models.Rule", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<long>("ActionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RuleType")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ActionId");

                    b.ToTable("Rules");
                });

            modelBuilder.Entity("SnappTrip.DataAccessLayer.Models.Condition", b =>
                {
                    b.HasOne("SnappTrip.DataAccessLayer.Models.Rule", "Rule")
                        .WithMany()
                        .HasForeignKey("RuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rule");
                });

            modelBuilder.Entity("SnappTrip.DataAccessLayer.Models.Rule", b =>
                {
                    b.HasOne("SnappTrip.DataAccessLayer.Models.Action", "Action")
                        .WithMany()
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Action");
                });
#pragma warning restore 612, 618
        }
    }
}
